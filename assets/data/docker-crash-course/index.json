{"hash":"2cbdc03282b13aa09057a95b3886c7e2d475e94d","data":{"post":{"title":"Docker Crash Course","date":"February 26, 2019","content":"<p>This document provides an introduction and reference guide for developing with the containerisation tool <a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker</a> and is by no means exhaustive. If you wish to further your knowledge on the capabilities of Docker please see the <a href=\"#resources\">Resources</a> section.</p>\n<h3 id=\"overview\"><a href=\"#overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Overview</h3>\n<p>Docker is a tool for running applications in an isolated environment, known as a <a href=\"https://www.docker.com/resources/what-container#/package_software\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker container</a>, this gives many advantages such as reducing machine specific setup problems and being able to quickly spin up an application for development without going through the pain of following a (potentially outdated) README file.</p>\n<p>Virtual machines can achieve environment isolation however Docker containers are much less computationally and memory intensive, allowing you to run multiple applications each in a sandboxed environment where the processes will not conflict with one and other (<a href=\"https://stackoverflow.com/questions/16047306/how-is-docker-different-from-a-virtual-machine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">comparison to virtual machines</a>).</p>\n<p>Docker has become widely accepted among the development community since it's initial release in 2013, a 2018 <a href=\"https://www.datadoghq.com/docker-adoption/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Datadog survey</a> reports that 25% of companies have adopted Docker in some form. Docker did not invent the concept of containers, it was originally built upon <a href=\"https://en.wikipedia.org/wiki/LXC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Linux Container</a> technology, however it is the tooling for automating and customising the creation of containers and ability to share and re-use these blueprints that Docker has brought to the table (<a href=\"https://docs.docker.com/engine/faq/#what-does-docker-technology-add-to-just-plain-lxc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">comparison to LXC</a>).</p>\n<h3 id=\"community-edition-installation\"><a href=\"#community-edition-installation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Community Edition Installation</h3>\n<ul>\n<li><a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ubuntu install</a></li>\n<li><a href=\"https://docs.docker.com/docker-for-mac/install/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mac install</a></li>\n</ul>\n<h3 id=\"docker-images\"><a href=\"#docker-images\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Images</h3>\n<p>A Docker container is a running instance of a <a href=\"https://docs.docker.com/v17.09/engine/userguide/storagedriver/imagesandcontainers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker image</a> (an image is to a container as a <code>Class</code> is to an <code>Object</code> in terms of OOP), the image encompasses the state of the OS, software and application code.</p>\n<p><a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker Hub</a> is a registry which allows anyone to share and download images for re-use, with over 2 million images available. The Docker team maintain a useful set of images in a <a href=\"https://hub.docker.com/search/?q=&#x26;type=image&#x26;image_filter=official\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">standard library</a>, for example <a href=\"https://hub.docker.com/_/redis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis</a>, <a href=\"https://hub.docker.com/_/postgres\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postgres</a>, <a href=\"https://hub.docker.com/_/python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python</a>, <a href=\"https://hub.docker.com/_/nginx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nginx</a> etc. Usefully you can inherit from one or more images then add customisation to curate an image for your use case, this can save a lot of time of as often someone else has uploaded a configuration which you can leverage. Some images even come with a helpful 'How to use this image' section e.g. see the <a href=\"https://hub.docker.com/_/python/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python image</a>.</p>\n<p>There are other available registries available such as the <a href=\"https://about.gitlab.com/2016/05/23/gitlab-container-registry/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitLab Container Registry</a> and <a href=\"https://cloud.google.com/container-registry/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Cloud Registry</a>.</p>\n<p>The configuration file from which an image is built is known as a <a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dockerfile</a>. Each line in the file is an instruction which when executed adds a new layer to the image.</p>\n<h3 id=\"docker-cli\"><a href=\"#docker-cli\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker CLI</h3>\n<p>There is a <a href=\"https://docs.docker.com/engine/reference/commandline/cli/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker Command Line Interface</a> for managing and interacting with Docker images and containers. To see all of the available commands run <code>docker --help</code> in a terminal. The following is a selection of commands that are regularly used in development with Docker:</p>\n<ul>\n<li>\n<pre><code class=\"language-bash\"> docker build [OPTIONS] PATH | URL | -\n</code></pre>\n<p>The <a href=\"https://docs.docker.com/engine/reference/commandline/build/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">build command</a> executes the Dockerfile in order to build an image, if the <code>-f</code> option is omitted it will default to <code>Dockerfile</code> so ensure you are running this from the correct directory.</p>\n</li>\n<li>\n<pre><code class=\"language-bash\">docker image ls [OPTIONS] [REPOSITORY[:TAG]]\n</code></pre>\n<p>The <a href=\"https://docs.docker.com/engine/reference/commandline/image_ls/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">image ls command</a> lists the images that you have downloaded or created on your machine.</p>\n</li>\n<li>\n<pre><code class=\"language-bash\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n</code></pre>\n<p>The <a href=\"https://docs.docker.com/engine/reference/commandline/run/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">run command</a> will run a given command in a new container. For example <code>docker run -it ubuntu bash</code> runs bash inside a container where <code>-i</code> means it is an interactive session, <code>-t</code> allocates a pseudo-TTY, <code>ubuntu</code> is the image name and <code>bash</code> is the command.</p>\n</li>\n<li>\n<pre><code class=\"language-bash\">docker ps [OPTIONS]\n</code></pre>\n<p>The <a href=\"https://docs.docker.com/engine/reference/commandline/ps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ps command</a> lists all of the running containers.</p>\n</li>\n<li>\n<pre><code class=\"language-bash\">docker system prune [OPTIONS]\n</code></pre>\n<p>The <a href=\"https://docs.docker.com/engine/reference/commandline/system_prune/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">system prune command</a> removes unused data, a common use case for this is to remove the data from a database.</p>\n</li>\n<li>\n<pre><code class=\"language-bash\">docker exec -i -t CONTAINER /bin/bash\n</code></pre>\n<p>This allows you to execute bash commands inside of a running docker container, where <code>CONTAINER</code> can be the ID or name of the container found using <code>docker ps</code>. This can be used to run sql queries against a database running inside a container for example.</p>\n</li>\n</ul>\n<h3 id=\"docker-compose\"><a href=\"#docker-compose\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Compose</h3>\n<p>For most of the projects a fully fledged system comprises of more than one component e.g. Django connecting to a Postgres database, it is best practice to have each of these components running in separate containers. <a href=\"https://docs.docker.com/compose/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker Compose</a> is a tool for defining and running multi-container Docker applications. See <a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> for the installation guide.</p>\n<p><code>docker-compose.yml</code> is the configuration file for defining services that make up your application so they can be run together in an isolated environment, full reference for usage can be found <a href=\"https://docs.docker.com/compose/compose-file/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>Docker Compose also has it's own <a href=\"https://docs.docker.com/compose/reference/overview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CLI</a> for building images and running multiple containers. Here are a couple of commonly used in development:</p>\n<ul>\n<li>\n<pre><code class=\"language-bash\">docker-compose build [options] [--build-arg key=val...] [SERVICE...]\n</code></pre>\n<p>The <a href=\"https://docs.docker.com/compose/reference/build/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">build command</a> builds the images required for all services defined in <code>docker-compose.yml</code>.  </p>\n</li>\n<li>\n<pre><code class=\"language-bash\">docker-compose up [options] [--scale SERVICE=NUM...] [SERVICE...]\n</code></pre>\n<p>The <a href=\"https://docs.docker.com/compose/reference/up/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">up command</a> starts the running of containers.</p>\n</li>\n<li>\n<pre><code class=\"language-bash\">docker-compose run --service-ports SERVICE\n</code></pre>\n<p>Using the <code>--service-ports</code> flag means that you are able to use <a href=\"https://github.com/gotcha/ipdb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ipdb</a> or other debug tools whilst running docker.</p>\n</li>\n</ul>\n<h3 id=\"docker-network\"><a href=\"#docker-network\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Network</h3>\n<p>Containers run within a <a href=\"https://docs.docker.com/network/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker Network</a>, this can be configured to provide complete isolation, which enable building web applications that work together securely. For containers to communicate, e.g. Django communicating with a Postgres instance, ports need to be exposed within the Docker network using an <a href=\"https://docs.docker.com/compose/compose-file/#expose\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">EXPOSE</a> instruction in the Dockerfile or an <a href=\"https://docs.docker.com/compose/compose-file/#expose\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">expose</a> declaration in the <code>docker-compose.yml</code> file. However there might be cases where you want to access the network externally, such as calling a public API or viewing a served webpage. Ports of the network can be published to the host network either with <code>-p</code> flag on the <a href=\"https://docs.docker.com/engine/reference/commandline/run/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docker run command</a> or the <a href=\"https://docs.docker.com/compose/compose-file/#ports\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ports</a> declaration in a <code>docker-compose.yml</code> file.</p>\n<p>One common 'gotcha' is that in order to serve a Django application you must use <code>0.0.0.0</code> as the ip e.g. <code>python manage.py runserver 0.0.0.0:8000</code>, in this case you would want to make port <code>8000</code> public in order to access the site via a web browser.</p>\n<h3 id=\"docker-volumes\"><a href=\"#docker-volumes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Volumes</h3>\n<p>When developing with Docker it is likely that you want to make changes to the application code that is running inside docker, <a href=\"https://docs.docker.com/storage/volumes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">volumes</a> allow changes to code to be reflected inside of a container by giving the container access to part of the local file system. A volume can be defined using the <a href=\"https://docs.docker.com/engine/reference/builder/#volume\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VOLUME</a> instruction in a Dockerfile, <code>-v</code> flag for the <code>docker run</code> command or the <a href=\"https://docs.docker.com/compose/compose-file/#volumes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">volumes</a> declaration in a <code>docker-compose.yml</code>.</p>\n<h3 id=\"docker-for-frontend\"><a href=\"#docker-for-frontend\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker for Frontend</h3>\n<p>You can also use Docker for frontend development, you can build tools such as <a href=\"https://github.com/gulpjs/gulp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gulp</a> in a container in order to build the relative frontend files and subsequently pick up code changes during frontend development. Since the lifetime of a Docker container is the lifetime of the main process, the container will continue to run for as long as the Gulp process executes.</p>\n<h3 id=\"docker-guis\"><a href=\"#docker-guis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker GUIs</h3>\n<p>If you prefer using a GUI to visualise and interact with running Docker containers, here are some options:</p>\n<ul>\n<li><a href=\"https://kitematic.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kitematic</a> (The default GUI created by the Docker company)</li>\n<li><a href=\"https://www.portainer.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Portainer</a></li>\n<li><a href=\"https://dockstation.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DockStation</a></li>\n<li><a href=\"https://microbadger.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MicroBadger</a></li>\n</ul>\n<p>It is important not be become over-reliant on a GUI as control via a CLI is sometimes the only option.</p>\n<h3 id=\"docker-in-production\"><a href=\"#docker-in-production\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker in Production</h3>\n<p>When it comes to deploying a system of multiple Docker containers to production, it can quickly escalate in complexity, this requires thinking about how to reliably restart, upgrade, scale and monitor containers. There are tools to help solve these problems such as <a href=\"https://kubernetes.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kubernetes</a>, <a href=\"https://docs.docker.com/engine/swarm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker Swarm</a> and <a href=\"https://www.nomadproject.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nomad</a> but each come with a the cost of time investment in learning.</p>\n<h3 id=\"resources\"><a href=\"#resources\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Resources</h3>\n<ul>\n<li><a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker documentation</a></li>\n<li><a href=\"https://docs.docker.com/compose/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker Compose documentation</a></li>\n<li><a href=\"https://docker-curriculum.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">'Docker for beginners' tutorial</a></li>\n<li><a href=\"https://serversforhackers.com/c/getting-started-with-docker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">'Getting started with Docker' tutorial</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=YFl2mCHdv24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">'Learn Docker in 12 Minutes' video</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Qw9zlE3t8Ko\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">'Docker Compose in 12 minutes' video</a></li>\n<li><a href=\"https://github.com/veggiemonk/awesome-docker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">An awesome list of Docker resources</a></li>\n<li><a href=\"https://www.amazon.com/gp/product/B00LRROTI4/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Docker Book</a></li>\n<li><a href=\"https://www.amazon.com/Using-Docker-Developing-Deploying-Containers/dp/1491915765/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using Docker (O'Reilly)</a></li>\n<li><a href=\"https://www.amazon.com/Docker-Cookbook-Solutions-Distributed-Applications/dp/149191971X/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker Cookbook (O'Reilly)</a></li>\n</ul>\n","tags":[{"title":"Backend","path":"/tag/Backend/"},{"title":"Docker","path":"/tag/Docker/"}]}},"context":{}}